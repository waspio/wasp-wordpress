<?php
/*
Plugin Name: Wasp for Wordpress
Plugin URI: https://wasp.io/
Description: Wasp.io automatically tracks errors generated by your applications, intelligently notifies your team, and provides realtime data feeds of errors and activity for all of your websites.
Version: 2.1.6
Author: Wasp.io
Author URI: https://wasp.io
License: MIT
*/

// Make sure we don't expose any info if called directly
if ( !function_exists( 'add_action' ) )
{
    echo 'Good try ;)';
    exit;
}

define( 'WASP_VERSION', '2.1.6' );
define( 'WASP_HOST_BASE', 'https://wasp.io/' );
define( 'WASP_MINIMUM_WP_VERSION', '3.0' );
define( 'WASP_PLUGIN_URL', plugin_dir_url( __FILE__ ) );
define( 'WASP_PLUGIN_DIR', plugin_dir_path( __FILE__ ) );
define( 'WASP_LOGO', WASP_PLUGIN_URL . '/img/wasp.png' );
define( 'WASP_CACHE_KEY', 'wasp_auth_response' );
define( 'WASP_CACHE_DURATION', ( 2 * DAY_IN_SECONDS ) ); //Cache the response for 48hrs
require_once( WASP_PLUGIN_DIR . 'plugin-updater/BFIGitHubPluginUploader.php' );
if( is_admin() )
{
    new BFIGitHubPluginUpdater( __FILE__, 'waspio', 'wasp-wordpress' );
}

if( !defined( 'WP_DEBUG' ) )
    define( 'WP_DEBUG', false );
if( !defined( 'WP_DEBUG_LOG' ) )
    define( 'WP_DEBUG_LOG', false );
if( !defined( 'WP_DEBUG_DISPLAY' ) )
    define( 'WP_DEBUG_DISPLAY', false );

register_activation_hook( __FILE__, 'wasp_install' );
register_deactivation_hook( __FILE__, 'wasp_uninstall' );
add_action( 'admin_menu', 'wasp_admin_pages' );
add_action( 'admin_init', 'register_wasp_settings' );
add_action( 'init', 'wasp_start' );
add_action( 'template_redirect', 'wasp_track_404' );
add_filter( 'plugin_action_links_'.plugin_basename(__FILE__), 'wasp_settings_link' );
wp_enqueue_script( 'jquery' );

global $wasp_levels, $wasp, $wasp_activated, $wasp_default_ignored;
$wasp_activated = false;
$wasp_levels = array(
    'User Log' => 0, 
    'Notice' => 1, 
    'User Notice' => 2, 
    'Strict' => 3, 
    'Warning' => 4, 
    'Core Warning' => 5, 
    'Compile Warning' => 6, 
    'User Warning' => 7, 
    'Deprecated' => 8, 
    'User Deprecated' => 9, 
    'User Error' => 10, 
    'Recoverable Error' => 11, 
    'Fatal Error' => 12, 
    'Parse' => 13, 
    'Compile Error' => 14, 
    'Core Error' => 15, 
    'Database Error' => 16, 
    'Class Exception' => 17, 
    'JavaScript' => 21, 
    'Ajax' => 22
);
$wasp_default_ignored = array( "1", "3", "4" );


/**
 * Wasp installation function
 */
if( !function_exists( 'wasp_install' ) )
{
    function wasp_install()
    {
        global $wasp_default_ignored;
        
        add_option( 'wasp_active_status', '1', '', 'yes' );
        add_option( 'wasp_api_key', '', '', 'yes' );
        add_option( 'wasp_track_js', '', '', 'yes' );
        add_option( 'wasp_track_ajax', '', '', 'yes' );
        add_option( 'wasp_project_environment', '', '', 'yes' );
        add_option( 'wasp_track_users', '1', '', 'yes' );
        //Default to ignoring the most common wordpress errors
        add_option( 'wasp_ignored_levels', $wasp_default_ignored, '', 'yes' );
        add_option( 'wasp_track_404', '1', '', 'yes' );
        add_option( 'wasp_ignored_domains', '', '', 'yes' );
    }
}

/**
 * Wasp uninstallation function
 */
if( !function_exists( 'wasp_uninstall' ) )
{
    function wasp_uninstall()
    {
        delete_option( 'wasp_active_status' );
        delete_option( 'wasp_api_key' );
        delete_option( 'wasp_track_js' );
        delete_option( 'wasp_track_ajax' );
        delete_option( 'wasp_project_environment' );
        delete_option( 'wasp_track_users' );
        delete_option( 'wasp_ignored_levels' );
        delete_option( 'wasp_track_404' );
        delete_option( 'wasp_ignored_domains' );
    }
}

/**
 * Function to add admin pages
 */
if( !function_exists( 'wasp_admin_pages' ) )
{
    function wasp_admin_pages()
    {
        add_menu_page( 'Wasp', 'Wasp.io', 'administrator', 'wasp_plugin', 'wasp_settings', WASP_LOGO );
        add_submenu_page( 'wasp_plugin', 'Wasp Configuration', 'Configuration', 'administrator', 'wasp-settings', 'wasp_settings' );
        add_submenu_page( 'wasp_plugin', 'About Wasp.io', 'About', 'administrator', 'wasp-about', 'wasp_about' );
    }
}


/**
 * Add a settings link from the plugins page
 */
function wasp_settings_link( $links )
{ 
    $settings_link = '<a href="admin.php?page=wasp-settings">Settings</a>'; 
    array_unshift( $links, $settings_link ); 
    return $links; 
}


/**
 * Settings page
 */
if( !function_exists( 'wasp_settings' ) )
{
    function wasp_settings()
    {
        include WASP_PLUGIN_DIR.'/settings.php';
    }
}


/**
 * Register the wasp config settings
 */
function register_wasp_settings()
{
    register_setting( 'wasp-install-group', 'wasp_api_key' );
    
    register_setting( 'wasp-settings-group', 'wasp_active_status' );
    register_setting( 'wasp-settings-group', 'wasp_track_js' );
    register_setting( 'wasp-settings-group', 'wasp_track_ajax' );
    register_setting( 'wasp-settings-group', 'wasp_project_environment' );
    register_setting( 'wasp-settings-group', 'wasp_track_users' );
    register_setting( 'wasp-settings-group', 'wasp_ignored_levels' );
    register_setting( 'wasp-settings-group', 'wasp_track_404' );
    register_setting( 'wasp-settings-group', 'wasp_ignored_domains' );
}


/**
 * About page
 */
if( !function_exists( 'wasp_about' ) )
{
    function wasp_about()
    {
        include WASP_PLUGIN_DIR.'/about.php';
    }
}


/**
 * Function to check the user and project Wasp Key
 */
if( !function_exists( 'wasp_checkkey' ) )
{
    function wasp_checkkey()
    {
        if( !get_option( 'wasp_api_key' ) )
        {
            return false;
        }
        
        //Check the cache so WP isn't pinging on every pageload to see if wasp is authorized
        $found = get_transient( WASP_CACHE_KEY );
        if( $found !== false && $found == 200 )
        {
            return true;
        }
        else
        {
            $checkpage = WASP_HOST_BASE .'requests/validate-project';
            $response = wp_remote_post( $checkpage, array(
                'method' => 'POST',
                'timeout' => 2,
                'redirection' => 5,
                'httpversion' => '1.0',
                'blocking' => true, 
                'body' => ( array( 'api_key' => get_option( 'wasp_api_key' ), 'version' => WASP_VERSION ) )
                )
            );

            if( is_wp_error( $response ) )
            {
                $error_message = $response->get_error_message();
                echo "Something went wrong: $error_message";
            }
            else
            {
                $body = wp_remote_retrieve_body( &$response );
                $body = json_decode( $body, true );
                if( $body['status'] == true && $body['status'] == 200 )
                {
                    if( set_transient( WASP_CACHE_KEY, $body['status'], WASP_CACHE_DURATION ) )
                    {
                        return true;
                    }
                }
                else
                {
                    delete_transient( WASP_CACHE_KEY );
                    return false;
                }
            }
        }
    }
}

function wasp_js()
{
?>
<script type="text/javascript" src="<?php echo WASP_HOST_BASE; ?>wasp.js"></script>
<script type="text/javascript">
var WaspVars = {
    environment: '<?php echo get_option( 'wasp_project_environment' ); ?>'
};
<?php
if( get_option( 'wasp_track_ajax' ) == 1 )
{
    echo 'WaspVars.ajax = true;';
}
if( get_option( 'wasp_track_users' ) == 1 && is_user_logged_in() )
{
    global $current_user;
    get_currentuserinfo();
    echo  PHP_EOL . "WaspVars.user = {
        'id' : '".$current_user->ID."', 
        'user' : '".$current_user->user_login."', 
        'email' : '".$current_user->user_email."'
    };" . PHP_EOL;
}
?>
Wasp.setup('<?php echo get_option( 'wasp_api_key' ); ?>', WaspVars);
</script>
<?php
}


if( !function_exists( 'wasp_start' ) )
{
    function wasp_start()
    {
        if( function_exists( 'curl_version' ) && wasp_checkkey() && get_option( 'wasp_active_status' ) == 1 )
        {
            global $wasp_activated;
            $wasp_activated = true;
            $ignored = get_option( 'wasp_ignored_levels' );
            $ignored_domains = get_option( 'wasp_ignored_domains' );
            if( !empty( $ignored_domains ) )
            {
                $ignored_domains = explode( ',', $ignored_domains );
            }

            require_once( WASP_PLUGIN_DIR . 'wasp.class.php' );
            $params = array( 
                'environment' => get_option( 'wasp_project_environment' ), 
                'code' => true, 
                'ignore' => $ignored, 
                'display' => false, 
                'ignored_domains' => $ignored_domains
            );
            global $wasp;
            $wasp = new Wasp( get_option( 'wasp_api_key' ), $params );
            
            //Add a user if the settings say to
            if( get_option( 'wasp_track_users' ) == 1 && is_user_logged_in() )
            {
                global $current_user;
                get_currentuserinfo();
                $user = array(
                    'id' => $current_user->ID, 
                    'user' => $current_user->user_login, 
                    'email' => $current_user->user_email
                );
                $wasp->add_user( $user );
            }
            
            //Add js tracking if the settings say so
            if( get_option( 'wasp_track_js' ) == 1 )
            {
                add_action( 'wp_head', 'wasp_js', 1 );
            }
            
        } //end wasp usable
        
    } //end function

} //end !function_exists


/**
 * Function to track 404 errors if selected
 */
if( !function_exists( 'wasp_track_404' ) )
{
    function wasp_track_404()
    {
        global $wasp_activated;
        //Add the 404 handler function as needed
        if( $wasp_activated && is_404() && get_option( 'wasp_track_404' ) == 1 )
        {
            global $wasp;
            $uri = $_SERVER['REQUEST_URI'];
            $full_uri = home_url() . $uri;
            $wasp->error_handler( 404, '404 Not Found: '.$uri, $full_uri, 1, array() );
        }   
    }
}


/**
 * Warnings and checks
 */
if( !function_exists( 'curl_version' ) )
{
    function wasp_no_curl()
    {
        echo '<div class=\'updated fade\'><p><strong>Wasp: the cURL extension is not available in your PHP server.</strong> Wasp requires this library to send errors - please install and enable it in your php.ini file or request assistance from your hosting provider.</p></div>';
    }
    add_action( 'admin_notices', 'wasp_no_curl' );
}

if( get_option( 'wasp_active_status' ) == 1 && !wasp_checkkey() )
{
    function wasp_no_user()
    {
        echo '<div class=\'updated fade\'><p>Wasp is ready to track errors, but first you\'ll need to enter your API key on the <a href="admin.php?page=wasp-settings">configuration page.</a></p></div>';
    }
    add_action( 'admin_notices', 'wasp_no_user' );
}